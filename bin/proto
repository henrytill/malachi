#!/usr/bin/env bash

set -o pipefail
set -o nounset

readonly PREFIXDEBUG="[DEBUG]"
readonly PREFIXERROR="[ERROR]"

CWD="$(realpath .)"
SCRIPTDIR="$(dirname "$(realpath "${0}")")"

readonly CWD
readonly SCRIPTDIR

debug=0

usage() {
	cat <<EOF >&2
Usage: ${0} [-d] [directory]

Options:
    -d          Enable debug output

Arguments:
    directory   Git repository directory (default: current)
EOF
	exit 1
}

log() {
	if test "${debug}" -eq 1
	then
		printf "%s %s\n" "${PREFIXDEBUG}" "${1}" >&2
	fi
}

error() {
	printf "%s %s\n" "${PREFIXERROR}" "${1}" >&2
}

die() {
	error "${1}"
	exit 1
}

logvar() {
	test $# -eq 1 || error "usage: logvar varname"
	log "${1}=${!1}"
}

checkdir() {
	test $# -eq 1 || error "usage: checkdir varname"
	local varname="${1}"
	local value="${!varname}"

	test -n "${value}" || die "failed to initialize ${varname}"
	test -d "${value}" || die "${varname} is not a directory: ${value}"
}

getruntimedir() {
	if test -n "${XDG_RUNTIME_DIR:-}"
	then
		echo "${XDG_RUNTIME_DIR}/malachi"
		return
	fi

	local uid
	uid="$(id -u)"
	local runuserdir="/run/user/${uid}"

	if test -d "${runuserdir}" && test -w "${runuserdir}"
	then
		echo "${runuserdir}/malachi"
		return
	fi

	echo "${TMPDIR:-/tmp}/malachi-${uid}"
}

findrepo() {
	test $# -eq 1 || { error "usage: findrepo directory"; return 1; }
	local dir="${1}"
	git -C "${dir}" rev-parse --show-toplevel 2>/dev/null
}

firstrun() {
	test $# -eq 2 || { error "usage: firstrun repo head"; return 1; }
	local repo="${1}"
	local head="${2}"
	log "first run - generating add events for all files"
	git -C "${repo}" ls-tree -r --format="%(objectname) %(path)" "${head}" \
		| awk -v repo="${repo}" -v repohash="${head}" -f "${SCRIPTDIR}/../lib/firstrun.awk"
}

genevents() {
	test $# -eq 3 || { error "usage: genevents repo cached head"; return 1; }
	local repo="${1}"
	local cached="${2}"
	local head="${3}"
	git -C "${repo}" diff-tree --raw "${cached}" "${head}" \
		| awk -v repo="${repo}" -v repohash="${head}" -f "${SCRIPTDIR}/../lib/genevents.awk"
}

main() {
	local runtimedir
	local repo
	local head
	local cached

	checkdir CWD
	checkdir SCRIPTDIR

	while getopts "d" opt
	do
		case "${opt}" in
		d)
			debug=1
			;;
		*)
			usage
			;;
		esac
	done
	shift $((OPTIND - 1))

	command -v git >/dev/null 2>&1 || die "git not found"

	runtimedir="$(getruntimedir)"
	logvar runtimedir

	repo="$(findrepo "${1:-${CWD}}")" || die "no git directory"
	head="$(git -C "${repo}" rev-parse HEAD)"
	logvar repo
	logvar head

	local cachefile="${runtimedir}/roots${repo}"
	local commandpipe="${runtimedir}/command"
	logvar cachefile
	logvar commandpipe

	if ! test -f "${cachefile}"
	then
		if test -p "${commandpipe}"
		then
			firstrun "${repo}" "${head}" > "${commandpipe}"
		else
			log "daemon pipe not found, writing to stdout instead"
			firstrun "${repo}" "${head}"
		fi
		return
	fi

	cached="$(cat "${cachefile}")"

	if test "${cached}" = "${head}"
	then
		log "no changes since last run"
		return
	fi

	if test -p "${commandpipe}"
	then
		genevents "${repo}" "${cached}" "${head}" > "${commandpipe}"
	else
		log "daemon pipe not found, writing to stdout instead"
		genevents "${repo}" "${cached}" "${head}"
	fi
}

main "$@"
